import java.lang.*;import java.util.*;import java.util.ArrayList;import java.util.Scanner;import java.util.Arrays;class SuffixArray {    final String[] suffixes;    final int N;    public SuffixArray(String s) {        N = s.length();        suffixes = new String[N];        for (int i = 0; i < N; i++) suffixes[i] = s.substring(i);        Arrays.sort(suffixes);    }    public String select(int i) {        return suffixes[i];    }    public static int lcp(String s, String t) {        int N = Math.min(s.length(), t.length());        for (int i = 0; i < N; i++) if (s.charAt(i) != t.charAt(i))            return i;        return N;    }    public int lcp(int i) {        return lcp(suffixes[i], suffixes[i - 1]);    }}public class UVA11107 {    public static void main(String[] args) {        Scanner cin = new Scanner(System.in);        while (cin.hasNext()) {            int n = Integer.parseInt(cin.next());            if (n == 0) {                return;            } else {                int[] ls = new int[n + 1];                ls[0] = 0;                String line = "";                for (int i = 1; i <= n; i++) {                    String tmp = cin.next();                    line += tmp + i;                    ls[i] = ls[i - 1] + 1 + tmp.length();                }                findSub(line, n, ls);            }        }    }    private static void findSub(String line, int n, int[] ls) {        SuffixArray suffix = new SuffixArray(line);        int mm = 1;        ArrayList<String> rs = new ArrayList<String>();        for (int i = 1; i < suffix.N; i++) {            int h = suffix.lcp(i);            if (h < mm) {                continue;            }            String tmps = suffix.select(i).substring(0, h);            int tmpr = 0;            int j = 0;            while (true) {                j = line.indexOf(tmps, j);                if (j == -1) {                    break;                }                tmpr += 1;                for (int k = 1; k < ls.length; k++) {                    if (j < ls[k]) {                        j = ls[k];                        break;                    }                }                if (j >= line.length()) {                    break;                }            }            if (tmpr <= n / 2) {                continue;            }            if (h > mm) {                rs.clear();            }            rs.add(tmps);            mm = h;        }        if (rs.size() == 0) {            System.out.printf("?\n\n");        } else {            for (String r : rs) {                System.out.printf("%s\n", r);            }            System.out.printf("\n");        }    }}